name: Python package

on: [push]

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11"]

    steps:
      - uses: actions/checkout@v3


      #Cache the poetry installation
      - name: Load cached Poetry installation
        id: cached-poetry
        uses: actions/cache@v3
        with:
          path: ~/.local  # the path depends on the OS
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-2-${{ hashFiles('**/poetry.lock') }}-poetry #Increment to break cache
      - name: Install Poetry
        if: steps.cached-poetry.outputs.cache-hit != 'true'
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      #Python environment
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'poetry'

      #Plan for cached dependencies - speeds up builds by over 1 minute
      #Cache busted when poetry.lock changes - automated change
      - name: Load cached Dependencies
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          #Change -0- to something else to bust the cache manually if needed
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-2-${{ hashFiles('**/poetry.lock') }}-deps

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction -vvv

      #CI portion of the Job
      - name: Static Analysis and Code Formatting
        run: |
          source .venv/bin/activate
          
          echo "Run stubtest: stubtest cf_extension_core"
          stubtest cf_extension_core
          
          
          echo "Running mypy"
          mypy src/  --strict
          mypy tests/ --strict
          
          echo "Running flake8"
          flake8 --max-line-length 120 src/ tests/
          
          echo "Running black"
          black src/ tests/ -l 120 --check

      - name: Unit Tests
        run: |
          echo "Running pytest"   
          source .venv/bin/activate
          pytest  --cov-branch --cov=src/ tests/unit --log-cli-level=DEBUG --junit-xml=junit.xml --cov-report=xml --cov-report=html:ci_coverage/

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage.xml
          token: ${{ secrets.CODE_COV }}
          flags: unittests
          fail_ci_if_error: true
          verbose: true
      - name: Build
        run: |
          poetry build

  publish:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10"]
    steps:
      - uses: actions/checkout@v3

      #Cache the poetry installation
      - name: Load cached Poetry installation
        id: cached-poetry
        uses: actions/cache@v3
        with:
          path: ~/.local  # the path depends on the OS
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-1-${{ hashFiles('**/poetry.lock') }}-poetry #Increment to break cache
      - name: Install Poetry
        if: steps.cached-poetry.outputs.cache-hit != 'true'
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      #Python environment
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'poetry'

      #Plan for cached dependencies - speeds up builds by over 1 minute
      #Cache busted when poetry.lock changes - automated change
      - name: Load cached Dependencies
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-1-${{ hashFiles('**/poetry.lock') }}-deps
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root


      #Assuming above succeeds we need CD to pypi now.
      - name: Set current date as env variable
        run: echo "NOW=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_ENV #"2022_12_11_01_42_20"
      - name: Set version
        if: github.ref != 'refs/heads/master'
        run: |
          current_version=`poetry version --short`
          current_version="$current_version.dev$NOW"
          echo "Version = $current_version"
          poetry version $current_version
      - name: Build and Publish
        run: |
          poetry build
          poetry config pypi-token.pypi ${{ secrets.PYPI }}
          poetry publish